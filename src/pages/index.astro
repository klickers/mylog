---
import Layout from "../layouts/Layout.astro"
import DocRender from "../components/DocRender"
import { isSameDay, format } from "date-fns"

interface LogEntry {
	createdAt: EpochTimeStamp
	content: any
	group: LogGroup
}

interface LogGroup {
	name: string
	category: Array<LogCategory>
	type: LogType
}

interface LogCategory {
	name: string
}

interface LogType {
	name: string
}

const res = await fetch(import.meta.env.PUBLIC_API_URL, {
	method: "POST",
	headers: { "Content-Type": "application/json" },
	body: JSON.stringify({
		query: `
			query AllEntries($orderBy: [LogEntryOrderByInput!]!) {
				logEntries(orderBy: $orderBy) {
					createdAt
					content {
						document
					}
					group {
						name
						category {
							name
						}
						type {
							name
						}
					}
				}
			}`,
		variables: {
			orderBy: [
				{
					createdAt: "desc",
				},
			],
		},
	}),
})

const json = await res.json()
const entries = json.data.logEntries
---

<Layout title="Log">
	<main>
		<div class="grid gap-8">
			{
				entries.map((entry: LogEntry) => (
					<div class="flex gap-6 w-full">
						<div class="prose text-nowrap">
							<p class="badge pt-2 pb-3 badge-neutral">
								{() => {
									if (isSameDay(new Date(), entry.createdAt))
										return format(
											entry.createdAt,
											"HH:mmbbb"
										)
									else return format(entry.createdAt, "MM dd")
								}}
							</p>
						</div>
						<div class="w-full">
							<div class="mt-1">
								<div class="flex gap-3 mb-2">
									<div class="text-sm uppercase font-semibold">
										{entry.group.name}
									</div>
									<div class="text-sm">
										{entry.group.type.name} >
										{entry.group.category[0].name}
									</div>
								</div>
								<div class="prose">
									<DocRender
										document={entry.content.document}
									/>
								</div>
							</div>
						</div>
					</div>
				))
			}
		</div>
	</main>
</Layout>
